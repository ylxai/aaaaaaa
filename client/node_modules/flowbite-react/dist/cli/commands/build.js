import fs__default from 'fs/promises';
import { automaticClassGenerationMessage, excludeDirs, allowedExtensions, classListFilePath } from '../consts.js';
import { buildClassList } from '../utils/build-class-list.js';
import { extractComponentImports } from '../utils/extract-component-imports.js';
import { findFiles } from '../utils/find-files.js';
import { getConfig } from '../utils/get-config.js';
import { setupInit } from './setup-init.js';
import { setupOutputDirectory } from './setup-output-directory.js';

async function build() {
  await setupOutputDirectory();
  try {
    const config = await getConfig();
    await setupInit(config);
    const importedComponents = [];
    if (config.components.length) {
      console.warn(automaticClassGenerationMessage);
    } else {
      const files = await findFiles({
        patterns: allowedExtensions.map((ext) => `**/*${ext}`),
        excludeDirs
      });
      for (const file of files) {
        const content = await fs__default.readFile(file, "utf-8");
        const components = extractComponentImports(content);
        if (components.length) {
          importedComponents.push(...components);
        }
      }
    }
    const classList = buildClassList({
      components: config.components.length ? config.components : [...new Set(importedComponents)],
      dark: config.dark,
      prefix: config.prefix,
      version: config.version
    });
    console.log(`Generating ${classListFilePath} file...`);
    await fs__default.writeFile(classListFilePath, JSON.stringify(classList, null, 2));
  } catch (error) {
    console.error(`Failed to generate ${classListFilePath}:`, error);
  }
}

export { build };
//# sourceMappingURL=build.js.map
